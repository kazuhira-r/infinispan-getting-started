<?xml version="1.0" encoding="UTF-8"?>
<infinispan
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xsi:schemaLocation="urn:infinispan:config:9.0 http://www.infinispan.org/schemas/infinispan-config-9.0.xsd"
        xmlns="urn:infinispan:config:9.0">
    <jgroups>
        <stack-file name="udp" path="default-configs/default-jgroups-udp.xml"/>
    </jgroups>
    <cache-container>
        <jmx duplicate-domains="true"/>
        <transport cluster="test-cluster" stack="udp"/>

        <distributed-cache name="bookCache">
            <indexing index="LOCAL">
                <indexed-entities>
                    <indexed-entity>org.littlewings.infinispan.query.affinityindex.Book</indexed-entity>
                </indexed-entities>

                <property name="hibernate.search.default.directory_provider">infinispan</property>
                <property name="hibernate.search.default.exclusive_index_use">true</property>
                <property name="hibernate.search.default.indexmanager">
                    org.infinispan.query.indexmanager.InfinispanIndexManager
                </property>
                <property name="hibernate.search.default.reader.strategy">shared</property>
                <property name="hibernate.search.lucene_version">LUCENE_CURRENT</property>
            </indexing>
        </distributed-cache>

        <!--
        <distributed-cache name="affinityIndexBookCache"
                           key-partitioner="org.infinispan.distribution.ch.impl.AffinityPartitioner">
        -->
        <distributed-cache name="affinityIndexBookCache">
            <indexing index="PRIMARY_OWNER">
                <indexed-entities>
                    <indexed-entity>org.littlewings.infinispan.query.affinityindex.Book</indexed-entity>
                </indexed-entities>

                <property name="hibernate.search.default.directory_provider">infinispan</property>
                <property name="hibernate.search.default.exclusive_index_use">true</property>
                <property name="hibernate.search.default.indexmanager">
                    org.infinispan.query.affinity.AffinityIndexManager
                </property>
                <property name="hibernate.search.default.reader.strategy">shared</property>
                <property name="lhibernate.search.ucene_version">LUCENE_CURRENT</property>
                <!--
                <property name="hibernate.search.default.locking_cachename">LuceneIndexesLockingCustom</property>
                <property name="hibernate.search.default.data_cachename">LuceneIndexesDataCustom</property>
                <property name="hibernate.search.default.metadata_cachename">LuceneIndexesMetadataCustom</property>
                -->
            </indexing>
        </distributed-cache>

        <!--
        <distributed-cache name="shardSpecAffinityIndexBookCache"
                           key-partitioner="org.infinispan.distribution.ch.impl.AffinityPartitioner">
        -->
        <distributed-cache name="shardSpecAffinityIndexBookCache">
            <indexing index="PRIMARY_OWNER">
                <indexed-entities>
                    <indexed-entity>org.littlewings.infinispan.query.affinityindex.Book</indexed-entity>
                </indexed-entities>

                <property name="hibernate.search.default.directory_provider">infinispan</property>
                <property name="hibernate.search.default.exclusive_index_use">true</property>
                <property name="hibernate.search.default.indexmanager">
                    org.infinispan.query.affinity.AffinityIndexManager
                </property>
                <property name="hibernate.search.default.reader.strategy">shared</property>
                <property name="hibernate.search.default.sharding_strategy.nbr_of_shards">9</property>
                <property name="hibernate.search.lucene_version">LUCENE_CURRENT</property>
                <!--
                <property name="hibernate.search.default.locking_cachename">LuceneIndexesLockingCustom</property>
                <property name="hibernate.search.default.data_cachename">LuceneIndexesDataCustom</property>
                <property name="hibernate.search.default.metadata_cachename">LuceneIndexesMetadataCustom</property>
                -->
            </indexing>
        </distributed-cache>

        <!-- *************************************** -->
        <!--  Cache to store Lucene's file metadata  -->
        <!-- *************************************** -->
        <replicated-cache name="LuceneIndexesMetadata"
                          mode="SYNC"
                          remote-timeout="25000"
                          key-partitioner="org.infinispan.distribution.ch.impl.AffinityPartitioner">
            <locking striping="false" acquire-timeout="10000" concurrency-level="500" write-skew="false"/>
            <transaction mode="NONE"/>
            <expiration max-idle="-1"/>
            <indexing index="NONE"/>
            <state-transfer enabled="true" timeout="480000" await-initial-transfer="true"/>
        </replicated-cache>

        <!-- **************************** -->
        <!--  Cache to store Lucene data  -->
        <!-- **************************** -->
        <distributed-cache name="LuceneIndexesData"
                           mode="SYNC"
                           remote-timeout="25000"
                           key-partitioner="org.infinispan.distribution.ch.impl.AffinityPartitioner">
            <locking striping="false" acquire-timeout="10000" concurrency-level="500" write-skew="false"/>
            <transaction mode="NONE"/>
            <expiration max-idle="-1"/>
            <indexing index="NONE"/>
            <state-transfer enabled="true" timeout="480000" await-initial-transfer="true"/>
        </distributed-cache>

        <!-- ***************************** -->
        <!--  Cache to store Lucene locks  -->
        <!-- ***************************** -->
        <replicated-cache name="LuceneIndexesLocking"
                          mode="SYNC"
                          remote-timeout="25000"
                          key-partitioner="org.infinispan.distribution.ch.impl.AffinityPartitioner">
            <locking striping="false" acquire-timeout="10000" concurrency-level="500" write-skew="false"/>
            <transaction mode="NONE"/>
            <expiration max-idle="-1"/>
            <indexing index="NONE"/>
            <state-transfer enabled="true" timeout="480000" await-initial-transfer="true"/>
        </replicated-cache>
    </cache-container>
</infinispan>
